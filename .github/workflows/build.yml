name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # Arm Macs
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # Intel Macs
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # Install Node dependencies & build frontend
        run: |
          npm install
          npm run build

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: discord-tools-__VERSION__
          releaseName: 'Discord Tools v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Update latest.json
        run: |
          JSON_CONTENT=$(jq -n \
            --arg version "${{ env.VERSION }}" \
            --arg pub_date "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg url_x86 "https://github.com/byChratos/reponame/releases/download/discord-tools-${{ env.VERSION }}/discord-dtools-${{ env.VERSION }}.x86_64.rpm" \
            --arg url_arm "https://github.com/byChratos/reponame/releases/download/discord-tools-${{ env.VERSION }}/discord-tools_aarch64.app.tar.gz" \
            --arg url_linux "https://github.com/byChratos/reponame/releases/download/discord-tools-${{ env.VERSION }}/discord-tools_${{ env.VERSION }}_amd64.AppImage " \
            --arg url_windows "https://github.com/byChratos/reponame/releases/download/discord-tools-${{ env.VERSION }}/discord-tools_${{ env.VERSION }}_x64-setup.exe" \
            '{
              "version": $version,
              "notes": "Your Release Notes go here",
              "pub_date": $pub_date,
              "platforms": {
                "darwin-x86_64": { "signature": "Content of app.tar.gz.sig", "url": $url_x86 },
                "darwin-aarch64": { "signature": "Content of app.tar.gz.sig", "url": $url_arm },
                "linux-x86_64": { "signature": "Content of app.AppImage.tar.gz.sig", "url": $url_linux },
                "windows-x86_64": { "signature": "Content of app-setup.nsis.sig", "url": $url_windows }
              }
            }')

            # Gist aktualisieren
            curl -X PATCH "https://api.github.com/gists/31cb792833287c12afe3371e4a9b7a03" \
              -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"files\": {\"latest.json\": {\"content\": $JSON_CONTENT}}}"
